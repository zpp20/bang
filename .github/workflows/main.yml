name: Main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  push:

env:
  # Change this to invalidate existing cache.
  CACHE_PREFIX: v0
  PYTHONPATH: ./

jobs:
  checks:
    name: Python ${{ matrix.python }} - ${{ matrix.task.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        python: ["3.10", "3.11", "3.12"]
        task:
          - name: Test
            run: |
              pytest -v --color=yes tests/

        include:
          - python: "3.12"
            task:
              name: Lint
              run: ruff check .

          - python: "3.12"
            task:
              name: Type check
              run: pyright src/

          - python: "3.12"
            task:
              name: Style
              run: |
                isort --check .
                black --check .

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - run: |
          python -m pip install --upgrade pip setuptools wheel virtualenv auditwheel pipx
          test -d .venv || virtualenv -p $(which python) --copies --reset-app-data .venv
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install -e .[dev]

      - name: ${{ matrix.task.name }}
        run: |
          . .venv/bin/activate
          ${{ matrix.task.run }}

      - name: Clean up
        if: always()
        run: |
          . .venv/bin/activate
          pip uninstall -y bang

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - run: |
          python -m pip install --upgrade build virtualenv
          test -d .venv || virtualenv -p $(which python) --copies --reset-app-data .venv
          python -m venv .venv

      - name: Activate virtualenv
        run: |
          . .venv/bin/activate

      - name: Execute build
        run: |
          python -m build

      - name: Upload package distribution files
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  test-pypi:
    name: Release to Test PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/v') }}
    environment:
      name: testpypi
      url: https://test.pypi.org/project/bang-gpu/
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Prepare environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download package distribution files
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./dist/

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  official-pypi:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/v') && !contains(github.ref, '-') }}
    environment:
      name: pypi
      url: https://pypi.org/project/bang-gpu/
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Prepare environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download package distribution files
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./dist/

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://pypi.org/
